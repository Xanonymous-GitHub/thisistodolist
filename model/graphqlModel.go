// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	prisma "github.com/Xanonymous-GitHub/thisistodolist/prisma/client"
)

type UserForFriend struct {
	Nickname   string          `json:"nickname"`
	Email      string          `json:"email"`
	PictureURL string          `json:"pictureUrl"`
	Verified   bool            `json:"verified"`
	Friends    []UserForFriend `json:"friends"`
	Todos      []prisma.Todo   `json:"todos"`
}

type UserLayout struct {
	Nikename   string `json:"nikename"`
	PictureURL string `json:"pictureUrl"`
	Verified   bool   `json:"verified"`
}

type ChangeTodosInput struct {
	ID        []string `json:"id"`
	Sort      *int     `json:"sort"`
	Content   *string  `json:"content"`
	Completed *bool    `json:"completed"`
	Deleted   *bool    `json:"deleted"`
	Private   *bool    `json:"private"`
	Locked    *bool    `json:"locked"`
}

type ChangeUserInput struct {
	Username    string  `json:"username"`
	Nikename    *string `json:"nikename"`
	PictureURL  *string `json:"pictureUrl"`
	Oldpassword *string `json:"oldpassword"`
	Newpassword *string `json:"newpassword"`
}

type CreatTodoInput struct {
	Content   string `json:"content"`
	Completed *bool  `json:"completed"`
	Private   *bool  `json:"private"`
	Locked    *bool  `json:"locked"`
}

type CreatUserInput struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Nickname string `json:"nickname"`
	Password string `json:"password"`
}

type UserByUsernameInput struct {
	Username string `json:"username"`
}

type Level string

const (
	LevelAdmin      Level = "ADMIN"
	LevelUser       Level = "USER"
	LevelRestricted Level = "RESTRICTED"
)

var AllLevel = []Level{
	LevelAdmin,
	LevelUser,
	LevelRestricted,
}

func (e Level) IsValid() bool {
	switch e {
	case LevelAdmin, LevelUser, LevelRestricted:
		return true
	}
	return false
}

func (e Level) String() string {
	return string(e)
}

func (e *Level) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Level(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Level", str)
	}
	return nil
}

func (e Level) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
